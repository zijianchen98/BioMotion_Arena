
"""
A Python program that shows a point‐light stimulus animation representing biological motion.
In this animation, we depict a happy, light‐weight woman lying down.
The stimulus consists of exactly 15 white point‐lights on a solid black background.
The motion is generated by smooth sinusoidal movements that are biomechanically plausible.
"""

import sys
import math
import pygame

# Initialize Pygame
pygame.init()
screen_width, screen_height = 640, 480
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Biological Motion: Lying Down Woman")
clock = pygame.time.Clock()

# Define the base 2D positions for the 15 point‐lights.
# These positions roughly represent the head, shoulders, arms, torso, hips, knees, and feet.
# The person is lying horizontally with head at the left end.
#
# Points (indices):
#  1: Head
#  2: Left Shoulder
#  3: Right Shoulder
#  4: Left Elbow
#  5: Left Hand
#  6: Right Elbow
#  7: Right Hand
#  8: Upper Back
#  9: Lower Back
# 10: Left Hip
# 11: Right Hip
# 12: Left Knee
# 13: Right Knee
# 14: Left Foot
# 15: Right Foot
#
# These coordinates are chosen relative to an origin and then shifted by an offset so the stimulus is centered.
base_points = [
    (100, 240),  # 1 Head
    (150, 210),  # 2 Left Shoulder
    (150, 270),  # 3 Right Shoulder
    (130, 190),  # 4 Left Elbow
    (110, 170),  # 5 Left Hand
    (170, 290),  # 6 Right Elbow
    (190, 310),  # 7 Right Hand
    (200, 240),  # 8 Upper Back
    (250, 240),  # 9 Lower Back
    (250, 220),  # 10 Left Hip
    (250, 260),  # 11 Right Hip
    (300, 220),  # 12 Left Knee
    (300, 260),  # 13 Right Knee
    (350, 220),  # 14 Left Foot
    (350, 260)   # 15 Right Foot
]

# Offset to center the figure in the window
offset_x = (screen_width - 500) // 2  # 500 is an estimate range of our design coordinates
offset_y = (screen_height - 300) // 2
base_points = [(x + offset_x, y + offset_y) for (x, y) in base_points]

# For each point, assign custom motion parameters (amplitude in x and y and a phase offset in radians).
# These parameters produce subtle sinusoidal oscillations that simulate realistic, smooth motion.
# The values were chosen to be small enough (few pixels) so as to create a natural impression.
motion_params = [
    {"amp_x": 2, "amp_y": 2, "phase": 0.0},   # 1 Head
    {"amp_x": 1, "amp_y": 2, "phase": 0.5},   # 2 Left Shoulder
    {"amp_x": 1, "amp_y": 2, "phase": 0.5},   # 3 Right Shoulder
    {"amp_x": 2, "amp_y": 3, "phase": 0.7},   # 4 Left Elbow
    {"amp_x": 3, "amp_y": 3, "phase": 0.7},   # 5 Left Hand
    {"amp_x": 2, "amp_y": 3, "phase": -0.7},  # 6 Right Elbow
    {"amp_x": 3, "amp_y": 3, "phase": -0.7},  # 7 Right Hand
    {"amp_x": 1, "amp_y": 2, "phase": 0.3},   # 8 Upper Back
    {"amp_x": 1, "amp_y": 2, "phase": 0.3},   # 9 Lower Back
    {"amp_x": 1, "amp_y": 1, "phase": 0.2},   # 10 Left Hip
    {"amp_x": 1, "amp_y": 1, "phase": 0.2},   # 11 Right Hip
    {"amp_x": 1, "amp_y": 2, "phase": 0.4},   # 12 Left Knee
    {"amp_x": 1, "amp_y": 2, "phase": 0.4},   # 13 Right Knee
    {"amp_x": 1, "amp_y": 1, "phase": 0.6},   # 14 Left Foot
    {"amp_x": 1, "amp_y": 1, "phase": 0.6},   # 15 Right Foot
]

# Animation parameters
point_radius = 4  # radius for drawing each point (white circle)
bg_color = (0, 0, 0)
point_color = (255, 255, 255)
animation_speed = 2  # control the speed of the sinusoidal motion

running = True
start_ticks = pygame.time.get_ticks()

while running:
    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            
    # Calculate elapsed time in seconds
    t = (pygame.time.get_ticks() - start_ticks) / 1000.0 * animation_speed

    # Clear the screen
    screen.fill(bg_color)

    # Update and draw each point
    for base, params in zip(base_points, motion_params):
        # Compute new positions using a sinusoidal function for smooth oscillatory motion.
        # We add a small horizontal and vertical offset.
        dx = params["amp_x"] * math.sin(t + params["phase"])
        dy = params["amp_y"] * math.cos(t + params["phase"])
        x = int(base[0] + dx)
        y = int(base[1] + dy)
        pygame.draw.circle(screen, point_color, (x, y), point_radius)

    # Flip display
    pygame.display.flip()

    # Cap framerate for smooth motion
    clock.tick(60)

pygame.quit()
sys.exit()