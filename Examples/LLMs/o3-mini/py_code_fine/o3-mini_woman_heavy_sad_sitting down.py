
"""
This program shows a point‐light stimulus animation representing biological motion.
It uses 15 white point‐lights against a solid black background to depict a heavy, sad woman
sitting down. The 15 points roughly correspond to head, neck, shoulders, elbows, wrists,
torso, hips, knees, and ankles.
The motion is generated by interpolating between “standing” and “sitting” positions using a
smooth easing function.
Press the window’s close button to exit.
"""

import sys
import math
import pygame

# Initialize pygame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Biological Motion: Sad Woman Sitting Down")

clock = pygame.time.Clock()
FPS = 60

# Total animation duration in seconds and frames
DURATION = 5  # seconds
TOTAL_FRAMES = DURATION * FPS

# Define the 15 markers with their positions.
# We'll use the following labels:
# ["head", "neck", "left_shoulder", "right_shoulder", "left_elbow",
#  "right_elbow", "left_wrist", "right_wrist", "torso", "left_hip",
#  "right_hip", "left_knee", "right_knee", "left_ankle", "right_ankle"]

# Starting positions (standing pose)
start_points = {
    "head":         (400, 150),
    "neck":         (400, 200),
    "left_shoulder":(350, 210),
    "right_shoulder":(450, 210),
    "left_elbow":   (320, 260),
    "right_elbow":  (480, 260),
    "left_wrist":   (310, 320),
    "right_wrist":  (490, 320),
    "torso":        (400, 250),
    "left_hip":     (380, 300),
    "right_hip":    (420, 300),
    "left_knee":    (370, 380),
    "right_knee":   (430, 380),
    "left_ankle":   (360, 480),
    "right_ankle":  (440, 480)
}

# Final positions (sitting pose)
# In this sitting pose, the upper body is lowered and slumped slightly;
# the lower limbs bend so that the hips descend and the knees and ankles move upward.
end_points = {
    "head":         (400, 190),
    "neck":         (400, 240),
    "left_shoulder":(360, 250),
    "right_shoulder":(440, 250),
    "left_elbow":   (340, 280),
    "right_elbow":  (460, 280),
    "left_wrist":   (330, 300),
    "right_wrist":  (470, 300),
    "torso":        (400, 280),
    "left_hip":     (380, 350),
    "right_hip":    (420, 350),
    # knees are brought closer to the hips as she sits
    "left_knee":    (370, 360),
    "right_knee":   (430, 360),
    # ankles are shifted upward to simulate seating
    "left_ankle":   (370, 380),
    "right_ankle":  (430, 380)
}

# Easing function for smooth interpolation (smoothstep)
def smoothstep(t):
    # t should be in [0,1]
    return 3*t*t - 2*t*t*t

def interpolate_points(start, end, t):
    # Interpolate between two 2D points giving a progress parameter t in [0, 1]
    return (start[0] + (end[0] - start[0]) * t,
            start[1] + (end[1] - start[1]) * t)

frame = 0
running = True
while running:
    clock.tick(FPS)
    
    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Calculate progress and apply easing function.
    # When t exceeds 1, we simply keep the final pose.
    t = min(frame / TOTAL_FRAMES, 1.0)
    t_eased = smoothstep(t)
    
    # Fill background black
    screen.fill((0, 0, 0))
    
    # For each point, compute its current position then draw it
    for key in start_points:
        start_pos = start_points[key]
        end_pos = end_points[key]
        current_pos = interpolate_points(start_pos, end_pos, t_eased)
        # Draw a small circle for each marker
        pygame.draw.circle(screen, (255, 255, 255), 
                           (int(current_pos[0]), int(current_pos[1])), 5)
    
    pygame.display.flip()
    frame += 1

pygame.quit()
sys.exit()